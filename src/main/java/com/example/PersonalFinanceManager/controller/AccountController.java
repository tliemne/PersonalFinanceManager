package com.example.PersonalFinanceManager.controller;

import com.example.PersonalFinanceManager.model.Account;
import com.example.PersonalFinanceManager.model.User;
import com.example.PersonalFinanceManager.service.AccountService;
import com.example.PersonalFinanceManager.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Controller
@RequestMapping("/dashboard/accounts")
public class AccountController {

    // üßç‚Äç‚ôÇÔ∏è User m·∫∑c ƒë·ªãnh (t·∫°m th·ªùi khi ch∆∞a c√≥ ƒëƒÉng nh·∫≠p)
    private final Long userId = 1L;

    @Autowired
    private AccountService accountService;

    @Autowired
    private UserService userService;

    // üü¢ Hi·ªÉn th·ªã danh s√°ch t√†i kho·∫£n c·ªßa user
    @GetMapping
    public String listAccounts(Model model,
                               @RequestParam(value = "success", required = false) String success,
                               @RequestParam(value = "error", required = false) String error) {
        try {
            // L·∫•y user hi·ªán t·∫°i
            User user = userService.getUserById(userId)
                    .orElseThrow(() -> new IllegalStateException("Kh√¥ng t√¨m th·∫•y user m·∫∑c ƒë·ªãnh"));

//             ‚úÖ (T√πy ch·ªçn) C·∫≠p nh·∫≠t l·∫°i s·ªë d∆∞ th·ª±c t·∫ø theo l·ªãch s·ª≠ giao d·ªãch
             accountService.recalculateAllBalances(userId);

            // Ch·ªâ l·∫•y c√°c t√†i kho·∫£n thu·ªôc user n√†y
            List<Account> accounts = accountService.getAccountsByUserId(userId);

            // ‚úÖ T√≠nh t·ªïng s·ªë d∆∞
            double totalBalance = accounts.stream()
                    .mapToDouble(Account::getBalance)
                    .sum();

            // ‚úÖ Truy·ªÅn d·ªØ li·ªáu cho layout base
            model.addAttribute("accounts", accounts);
            model.addAttribute("newAccount", new Account());
            model.addAttribute("success", success);
            model.addAttribute("error", error);
            model.addAttribute("activePage", "accounts");
            model.addAttribute("totalBalance", totalBalance); // üëà fix l·ªói null ‚Ç´

            // ‚úÖ D√πng layout/base.html v√† n·∫°p fragment dashboard/accounts
            model.addAttribute("title", "Qu·∫£n l√Ω t√†i kho·∫£n");
            model.addAttribute("content", "dashboard/accounts");

            return "layout/base"; // ‚¨ÖÔ∏è load layout c√≥ Tailwind
        } catch (Exception e) {
            e.printStackTrace();
            model.addAttribute("error", "L·ªói khi t·∫£i danh s√°ch t√†i kho·∫£n!");
            model.addAttribute("activePage", "accounts");
            model.addAttribute("title", "L·ªói");
            model.addAttribute("content", "dashboard/accounts");
            return "layout/base";
        }
    }

    // üü¢ Th√™m t√†i kho·∫£n m·ªõi
    @PostMapping("/add")
    public String addAccount(@ModelAttribute("newAccount") Account account) {
        try {
            User user = userService.getUserById(userId)
                    .orElseThrow(() -> new IllegalStateException("Kh√¥ng t√¨m th·∫•y user m·∫∑c ƒë·ªãnh"));

            account.setUser(user);
            accountService.createAccount(account);
            return "redirect:/dashboard/accounts?success=Th√™m v√≠ th√†nh c√¥ng!";
        } catch (Exception e) {
            e.printStackTrace();
            return "redirect:/dashboard/accounts?error=L·ªói khi th√™m v√≠!";
        }
    }

    // üü¢ C·∫≠p nh·∫≠t t√†i kho·∫£n
    @PostMapping("/update/{id}")
    public String updateAccount(@PathVariable Long id,
                                @ModelAttribute Account account) {
        try {
            accountService.updateAccount(id, account);
            return "redirect:/dashboard/accounts?success=C·∫≠p nh·∫≠t v√≠ th√†nh c√¥ng!";
        } catch (RuntimeException e) {
            e.printStackTrace();
            return "redirect:/dashboard/accounts?error=" + e.getMessage();
        } catch (Exception e) {
            e.printStackTrace();
            return "redirect:/dashboard/accounts?error=L·ªói kh√¥ng x√°c ƒë·ªãnh khi c·∫≠p nh·∫≠t!";
        }
    }

    // üü¢ X√≥a t√†i kho·∫£n
    @GetMapping("/delete/{id}")
    public String deleteAccount(@PathVariable Long id) {
        try {
            accountService.deleteAccount(id);
            return "redirect:/dashboard/accounts?success=ƒê√£ x√≥a v√≠ th√†nh c√¥ng!";
        } catch (RuntimeException e) {
            e.printStackTrace();
            return "redirect:/dashboard/accounts?error=" + e.getMessage();
        } catch (Exception e) {
            e.printStackTrace();
            return "redirect:/dashboard/accounts?error=L·ªói khi x√≥a v√≠!";
        }
    }
}
