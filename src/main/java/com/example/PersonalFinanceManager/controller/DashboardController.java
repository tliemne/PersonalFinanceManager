package com.example.PersonalFinanceManager.controller;

import com.example.PersonalFinanceManager.dto.BudgetDTO;
import com.example.PersonalFinanceManager.dto.TransactionDTO;
import com.example.PersonalFinanceManager.model.*;
import com.example.PersonalFinanceManager.service.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import java.time.LocalDate;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

@Controller
public class DashboardController {

    private final Long userId = 1L; // ‚ö° T·∫°m c·ªë ƒë·ªãnh user_id

    @Autowired
    private UserService userService;

    @Autowired
    private TransactionService transactionService;

    @Autowired
    private BudgetService budgetService;

    @Autowired
    private CategoryService categoryService;

    @Autowired
    private GoalService goalService;
    @Autowired
    private AccountService accountService;

    // üè† Dashboard ch√≠nh
    @GetMapping("/dashboard")
    public String userDashboard(Model model) {
        List<Transaction> userTransactions = transactionService.getTransactionsByUserId(userId);

        double totalIncome = userTransactions.stream()
                .filter(t -> t.getTransactionType() == Transaction.TransactionType.INCOME)
                .mapToDouble(Transaction::getAmount)
                .sum();

        double totalExpense = userTransactions.stream()
                .filter(t -> t.getTransactionType() == Transaction.TransactionType.EXPENSE)
                .mapToDouble(Transaction::getAmount)
                .sum();

        double balance = totalIncome - totalExpense;

        // Giao d·ªãch g·∫ßn ƒë√¢y
        List<TransactionDTO> recentTransactions = userTransactions.stream()
                .sorted(Comparator.comparing(Transaction::getTransactionDate).reversed())
                .limit(5)
                .map(this::toDTO)
                .collect(Collectors.toList());

        model.addAttribute("totalIncome", totalIncome);
        model.addAttribute("totalExpense", totalExpense);
        model.addAttribute("balance", balance);
        model.addAttribute("transactions", recentTransactions);

        model.addAttribute("title", "B·∫£ng ƒëi·ªÅu khi·ªÉn");
        model.addAttribute("pageTitle", "T·ªïng quan");
        model.addAttribute("content", "dashboard/dashboard");
        model.addAttribute("activePage", "dashboard");

        return "layout/base";
    }

    // üíµ QU·∫¢N L√ù GIAO D·ªäCH
    // üíµ QU·∫¢N L√ù GIAO D·ªäCH
    @GetMapping("/dashboard/transaction")
    public String transactionPage(Model model) {
        List<TransactionDTO> transactions = transactionService.getTransactionsByUserId(userId)
                .stream()
                .map(this::toDTO)
                .collect(Collectors.toList());

        // ‚úÖ D√πng service m·ªõi ƒë·ªÉ l·∫•y b·∫£n x√≥a m·ªÅm
        List<TransactionDTO> deletedTransactions = transactionService.getDeletedTransactions()
                .stream()
                .filter(t -> t.getUser().getId().equals(userId))
                .map(this::toDTO)
                .collect(Collectors.toList());

        model.addAttribute("transactions", transactions);
        model.addAttribute("deletedTransactions", deletedTransactions);
        model.addAttribute("accounts", accountService.getAllAccounts());
        model.addAttribute("categories", categoryService.getAllCategories());
        model.addAttribute("transactionDto", new TransactionDTO());

        model.addAttribute("title", "Giao d·ªãch");
        model.addAttribute("pageTitle", "Qu·∫£n l√Ω giao d·ªãch");
        model.addAttribute("content", "dashboard/transaction");
        model.addAttribute("activePage", "transaction");

        return "layout/base";
    }

    // ‚ûï L∆∞u ho·∫∑c c·∫≠p nh·∫≠t giao d·ªãch
    @PostMapping("/dashboard/transaction/save")
    public String saveTransaction(@ModelAttribute TransactionDTO dto) {
        Transaction transaction = new Transaction();

        // G√°n th√¥ng tin c∆° b·∫£n
        transaction.setUser(userService.getUserById(userId).orElse(null));
        transaction.setAccount(accountService.getAccountById(dto.getAccountId()).orElse(null));
        transaction.setCategory(categoryService.getCategoryById(dto.getCategoryId()).orElse(null));

        transaction.setAmount(dto.getAmount());
        transaction.setTransactionType(Transaction.TransactionType.valueOf(dto.getTransactionType()));
        transaction.setStatus(Transaction.TransactionStatus.valueOf(dto.getStatus()));
        transaction.setDescription(dto.getDescription());

        // ‚ö†Ô∏è Fix l·ªói "transaction_date cannot be null"
        // N·∫øu ng∆∞·ªùi d√πng kh√¥ng ch·ªçn ng√†y ‚Üí t·ª± g√°n ng√†y hi·ªán t·∫°i
        if (dto.getTransactionDate() != null) {
            transaction.setTransactionDate(dto.getTransactionDate());
        } else {
            transaction.setTransactionDate(LocalDate.now());
        }

        // Tr√°nh null pointer cho isDeleted
        transaction.setIsDeleted(dto.getIsDeleted() != null ? dto.getIsDeleted() : false);

        // ‚ö° N·∫øu c√≥ ID ‚Üí c·∫≠p nh·∫≠t, ng∆∞·ª£c l·∫°i ‚Üí th√™m m·ªõi
        if (dto.getId() != null) {
            transactionService.updateTransaction(dto.getId(), transaction);
        } else {
            transactionService.createTransaction(transaction);
        }

        return "redirect:/dashboard/transaction";
    }

    // ‚ùå X√≥a m·ªÅm
    @GetMapping("/dashboard/transaction/delete/{id}")
    public String deleteTransaction(@PathVariable Long id) {
        // ‚úÖ g·ªçi ƒë√∫ng method trong service
        transactionService.deleteTransaction(id);
        return "redirect:/dashboard/transaction";
    }

    // ‚ôªÔ∏è Kh√¥i ph·ª•c
    @GetMapping("/dashboard/transaction/restore/{id}")
    public String restoreTransaction(@PathVariable Long id) {
        transactionService.restoreTransaction(id);
        return "redirect:/dashboard/transaction";
    }

    // üóëÔ∏è X√≥a vƒ©nh vi·ªÖn
    @GetMapping("/dashboard/transaction/permanent-delete/{id}")
    public String permanentDeleteTransaction(@PathVariable Long id) {
        transactionService.deleteById(id);
        return "redirect:/dashboard/transaction";
    }

    // üìä B√°o c√°o
    @GetMapping("/dashboard/report")
    public String reportPage(Model model) {
        List<Transaction> transactions = transactionService.getTransactionsByUserId(userId);

        double totalIncome = transactions.stream()
                .filter(t -> t.getTransactionType() == Transaction.TransactionType.INCOME)
                .mapToDouble(Transaction::getAmount)
                .sum();

        double totalExpense = transactions.stream()
                .filter(t -> t.getTransactionType() == Transaction.TransactionType.EXPENSE)
                .mapToDouble(Transaction::getAmount)
                .sum();

        double balance = totalIncome - totalExpense;

        List<TransactionDTO> transactionDTOs = transactions.stream()
                .map(this::toDTO)
                .collect(Collectors.toList());

        model.addAttribute("transactions", transactionDTOs);
        model.addAttribute("totalIncome", totalIncome);
        model.addAttribute("totalExpense", totalExpense);
        model.addAttribute("balance", balance);

        model.addAttribute("title", "B√°o c√°o t√†i ch√≠nh");
        model.addAttribute("pageTitle", "B√°o c√°o");
        model.addAttribute("content", "dashboard/report");
        model.addAttribute("activePage", "report");
        return "layout/base";
    }
    // üí∞ Ng√¢n s√°ch
    @GetMapping("/dashboard/budget") // ‚úÖ S·ª≠a l·∫°i ƒë∆∞·ªùng d·∫´n
    public String budgetPage(Model model) {
        List<BudgetDTO> budgets = budgetService.getAllBudgets().stream().map(b -> {
            BudgetDTO dto = new BudgetDTO();

            dto.setId(b.getId());
            dto.setUserId(b.getUser() != null ? b.getUser().getId() : null);
            dto.setUserName(b.getUser() != null ? b.getUser().getFullName() : "Kh√¥ng x√°c ƒë·ªãnh");

            dto.setCategoryId(b.getCategory() != null ? b.getCategory().getId() : null);
            dto.setCategoryName(b.getCategory() != null ? b.getCategory().getName() : "Kh√¥ng x√°c ƒë·ªãnh");

            dto.setAmountLimit(b.getAmountLimit());
            dto.setUsedAmount(b.getUsedAmount());
            dto.setStartDate(b.getStartDate());
            dto.setEndDate(b.getEndDate());
            dto.setIsDeleted(b.getIsDeleted());

            double progress = (b.getAmountLimit() != null && b.getAmountLimit() > 0)
                    ? (b.getUsedAmount() / b.getAmountLimit()) * 100
                    : 0.0;
            dto.setProgress(progress);

            String status = (b.getEndDate() != null && b.getEndDate().isBefore(LocalDate.now()))
                    ? "ƒê√£ h·∫øt h·∫°n"
                    : "C√≤n hi·ªáu l·ª±c";
            dto.setStatus(status);

            return dto;
        }).collect(Collectors.toList());

        model.addAttribute("budgets", budgets);
        model.addAttribute("categories", categoryService.getAllCategories());

        model.addAttribute("title", "Ng√¢n s√°ch");
        model.addAttribute("pageTitle", "Qu·∫£n l√Ω ng√¢n s√°ch");
        model.addAttribute("content", "dashboard/budget");
        model.addAttribute("activePage", "budget");

        return "layout/base";
    }

    // ‚ûï L∆∞u ho·∫∑c c·∫≠p nh·∫≠t ng√¢n s√°ch
    @PostMapping("/dashboard/budget/save") // ‚úÖ S·ª≠a l·∫°i ƒë∆∞·ªùng d·∫´n
    public String saveBudget(@ModelAttribute BudgetDTO dto) {
        if (dto.getId() != null) {
            budgetService.updateBudget(dto.getId(), dto);
        } else {
            Budget budget = new Budget();
            budget.setUser(userService.getUserById(userId).orElse(null));
            budget.setCategory(categoryService.getCategoryById(dto.getCategoryId()).orElse(null));
            budget.setAmountLimit(dto.getAmountLimit());
            budget.setUsedAmount(dto.getUsedAmount() != null ? dto.getUsedAmount() : 0.0);
            budget.setStartDate(dto.getStartDate());
            budget.setEndDate(dto.getEndDate());
            budget.setIsDeleted(false);
            budgetService.createBudget(budget);
        }

        return "redirect:/dashboard/budget"; // ‚úÖ redirect ƒë·ªìng b·ªô
    }

    // ‚ùå X√≥a ng√¢n s√°ch
    @GetMapping("/dashboard/budget/delete/{id}") // ‚úÖ S·ª≠a l·∫°i ƒë∆∞·ªùng d·∫´n
    public String deleteBudget(@PathVariable Long id) {
        budgetService.deleteBudget(id);
        return "redirect:/dashboard/budget";
    }
    // üóÇÔ∏è Danh m·ª•c
    @GetMapping("/dashboard/category")
    public String categoryPage(Model model) {
        List<Category> incomeCategories = categoryService.getIncomeCategories();
        List<Category> expenseCategories = categoryService.getExpenseCategories();

        model.addAttribute("incomeCategories", incomeCategories);
        model.addAttribute("expenseCategories", expenseCategories);

        model.addAttribute("title", "Danh m·ª•c");
        model.addAttribute("pageTitle", "Danh m·ª•c c·ªßa b·∫°n");
        model.addAttribute("content", "dashboard/category");
        model.addAttribute("activePage", "category");

        return "layout/base";
    }
    @GetMapping("/dashboard/goal")
    public String goalPage(Model model) {
        List<Goal> goals = goalService.getGoalsByUserId(userId);

        model.addAttribute("goals", goals);
        model.addAttribute("title", "M·ª•c ti√™u t√†i ch√≠nh");
        model.addAttribute("pageTitle", "M·ª•c ti√™u");
        model.addAttribute("content", "dashboard/goal");
        model.addAttribute("activePage", "goal");

        return "layout/base";
    }
    @GetMapping("/dashboard/settings")
    public String settingsPage(Model model) {
        // Gi·∫£ s·ª≠ t·∫°m th·ªùi userId c·ªë ƒë·ªãnh l√† 1L
        User user = userService.getUserById(userId).orElse(null);
        UserPreference preferences = userService.getUserPreferenceByUserId(userId);

        // G·ª≠i d·ªØ li·ªáu qua view
        model.addAttribute("user", user);
        model.addAttribute("preferences", preferences);

        model.addAttribute("title", "C√†i ƒë·∫∑t t√†i kho·∫£n");
        model.addAttribute("pageTitle", "C√†i ƒë·∫∑t");
        model.addAttribute("content", "dashboard/settings");
        model.addAttribute("activePage", "settings");

        return "layout/base";
    }
    private TransactionDTO toDTO(Transaction t) {
        String categoryName = (t.getCategory() != null) ? t.getCategory().getName() : "Kh√°c";

        return new TransactionDTO(
                t.getId(),
                t.getUser().getId(),
                t.getAccount().getId(),
                t.getCategory() != null ? t.getCategory().getId() : null, // tr√°nh null pointer
                categoryName, // ‚úÖ th√™m tr∆∞·ªùng n√†y ƒë·ªÉ Thymeleaf hi·ªÉn th·ªã t√™n danh m·ª•c
                t.getAmount(),
                t.getTransactionType().name(),
                t.getStatus().name(),
                t.getIsDeleted(),
                t.getDescription(),
                t.getTransactionDate(),
                t.getCreatedAt(),
                t.getUpdatedAt()
        );
    }
    // üìà Ph√¢n t√≠ch nhanh
    @GetMapping("/dashboard/analysis")
    public String quickAnalysis(Model model) {
        List<Transaction> transactions = transactionService.getTransactionsByUserId(userId);

        // T·ªïng thu / chi
        double totalIncome = transactions.stream()
                .filter(t -> t.getTransactionType() == Transaction.TransactionType.INCOME)
                .mapToDouble(Transaction::getAmount)
                .sum();

        double totalExpense = transactions.stream()
                .filter(t -> t.getTransactionType() == Transaction.TransactionType.EXPENSE)
                .mapToDouble(Transaction::getAmount)
                .sum();

        // Top 3 danh m·ª•c chi ti√™u
        List<CategorySpending> topCategories = transactions.stream()
                .filter(t -> t.getTransactionType() == Transaction.TransactionType.EXPENSE)
                .collect(Collectors.groupingBy(
                        t -> t.getCategory() != null ? t.getCategory().getName() : "Kh√°c",
                        Collectors.summingDouble(Transaction::getAmount)
                ))
                .entrySet().stream()
                .sorted((a, b) -> Double.compare(b.getValue(), a.getValue()))
                .limit(3)
                .map(e -> new CategorySpending(e.getKey(), e.getValue()))
                .collect(Collectors.toList());

        // Ng√¢n s√°ch g·∫ßn ch·∫°m gi·ªõi h·∫°n
        List<Budget> nearLimitBudgets = budgetService.getAllBudgets().stream()
                .filter(b -> b.getAmountLimit() > 0)
                .filter(b -> (b.getUsedAmount() / b.getAmountLimit()) > 0.8)
                .collect(Collectors.toList());

        // üßÆ So s√°nh chi ti√™u h√¥m nay v·ªõi trung b√¨nh 7 ng√†y g·∫ßn nh·∫•t
        double todayExpense = transactions.stream()
                .filter(t -> t.getTransactionType() == Transaction.TransactionType.EXPENSE)
                .filter(t -> t.getTransactionDate().isEqual(LocalDate.now()))
                .mapToDouble(Transaction::getAmount)
                .sum();

        double avgExpenseLast7Days = transactions.stream()
                .filter(t -> t.getTransactionType() == Transaction.TransactionType.EXPENSE)
                .filter(t -> !t.getTransactionDate().isBefore(LocalDate.now().minusDays(7)))
                .mapToDouble(Transaction::getAmount)
                .average()
                .orElse(0);

        String spendingAdvice;
        if (avgExpenseLast7Days > 0 && todayExpense > avgExpenseLast7Days * 1.2) {
            spendingAdvice = "üí° Chi ti√™u c·ªßa b·∫°n h√¥m nay cao h∆°n trung b√¨nh tu·∫ßn tr∆∞·ªõc "
                    + String.format("%.0f%%", (todayExpense / avgExpenseLast7Days - 1) * 100) + ". H√£y c√¢n nh·∫Øc l·∫°i nh√©!";
        } else if (avgExpenseLast7Days > 0 && todayExpense < avgExpenseLast7Days * 0.8) {
            spendingAdvice = "üéâ B·∫°n ƒëang chi ti√™u ti·∫øt ki·ªám h∆°n b√¨nh th∆∞·ªùng! Ti·∫øp t·ª•c ph√°t huy nh√©!";
        } else {
            spendingAdvice = "üìä Chi ti√™u c·ªßa b·∫°n h√¥m nay ·ªü m·ª©c ·ªïn ƒë·ªãnh so v·ªõi tu·∫ßn tr∆∞·ªõc.";
        }

        // G·ª≠i d·ªØ li·ªáu sang view
        model.addAttribute("totalIncome", totalIncome);
        model.addAttribute("totalExpense", totalExpense);
        model.addAttribute("topCategories", topCategories);
        model.addAttribute("nearLimitBudgets", nearLimitBudgets);
        model.addAttribute("spendingAdvice", spendingAdvice);

        model.addAttribute("title", "Ph√¢n t√≠ch nhanh");
        model.addAttribute("pageTitle", "Ph√¢n t√≠ch nhanh");
        model.addAttribute("content", "dashboard/analysis");
        model.addAttribute("activePage", "analysis");

        return "layout/base";
    }

    // ‚úÖ Class ph·ª• nh·ªè ƒë·ªÉ hi·ªÉn th·ªã danh m·ª•c chi ti√™u
    private static class CategorySpending {
        private final String name;
        private final double totalAmount;

        public CategorySpending(String name, double totalAmount) {
            this.name = name;
            this.totalAmount = totalAmount;
        }

        public String getName() { return name; }
        public double getTotalAmount() { return totalAmount; }
    }
}
